# Taskfile.yml — updated for schema‑aware codegen & hot‑reload
# Requires: Task >= v3.30, Go 1.22+, templ, goimports, Node 18+, Python 3.10+

version: "3"

# -------- Global defaults (override at CLI: APP_NAME=myapi task hot) ----------
vars:
  APP_NAME:   binrun
  BIN_DIR:    bin
  BIN_NAME:   "{{.APP_NAME}}"
  VERSION:    v0.1.0

interval: 200ms          # watcher polling interval
env:
  GO_ENV:   development  # overridden in prod task
  CGO_ENABLED: "0"       # static binaries by default

# -----------------------------------------------------------------------------  
tasks:
  # --- Dev tool bootstrap ----------------------------------------------------
  tools:
    desc: "Install Task, templ, goimports, NATS tooling, Playwright, and code‑gen CLIs"
    cmds:
      - go install github.com/go-task/task/v3/cmd/task@latest
      - go install github.com/a-h/templ/cmd/templ@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/nats-io/natscli/nats@latest
      - go install github.com/nats-io/nats-server/v2@latest
      - echo "Attempting to install Playwright Chromium browser..."
      - NODE_OPTIONS="" playwright install chromium --with-deps --no-shell
      # --- schema code‑gen dependencies ---
            # --- schema code‑gen dependencies ---
      - |
        if ! command -v bun >/dev/null 2>&1; then
          curl -fsSL https://bun.sh/install | bash
        fi
      - |
        if ! command -v uv >/dev/null 2>&1; then
          python -m pip install --upgrade pip
          python -m pip install --upgrade uv
        fi
      - uv pip install --upgrade --quiet datamodel-code-generator

  # --- Formatting & tidying --------------------------------------------------
  fmt:
    desc: "Run goimports + gofmt"
    cmds:
      - goimports -w .
      - gofmt -w -s .

  tidy:
    desc: "go mod tidy & verify"
    cmds:
      - go mod tidy && go mod verify

  # --- Code generation -------------------------------------------------------
  templ:
    desc: "Generate *_templ.go"
    sources: ["**/*.templ"]
    generates: ["**/*_templ.go"]
    cmds:
      - templ generate .

  codegen:
    desc: "Generate TS & Python types from scripts/**/in|out.schema.json"
    method: checksum
    sources:
      - "scripts/**/in.schema.json"
      - "scripts/**/out.schema.json"
    generates:
      - "scripts/**/types/*"
    cmds:
      # TypeScript types
      - |
        find scripts -name in.schema.json | while read f; do
          dir=$(dirname "$f")
          mkdir -p "$dir/types"
          bunx json-schema-to-typescript "$f" -o "$dir/types/in.ts" --bannerComment ""
          bunx json-schema-to-typescript "${f/in/out}" -o "$dir/types/out.ts" --bannerComment "" || true
        done
      # Python pydantic models
      - |
        find scripts -name in.schema.json | while read f; do
          dir=$(dirname "$f")
          mkdir -p "$dir/types"
          datamodel-codegen -i "$f" -o "$dir/types/in.py" --class-name Input
          datamodel-codegen -i "${f/in/out}" -o "$dir/types/out.py" --class-name Output || true
        done

  # --- Build helpers ---------------------------------------------------------
  build:
    desc: "Build dev binary to {{.BIN_DIR}}/{{.BIN_NAME}}"
    deps: [templ, fmt, tidy]
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -o {{.BIN_DIR}}/{{.BIN_NAME}} ./cmd/{{.APP_NAME}}

  # --- Process helpers -------------------------------------------------------
  kill:
    desc: "Kill running {{.BIN_NAME}} process (matching command line)"
    silent: true
    cmds:
      # Use pkill -f to match the command path, more reliable than -x
      - pkill -f "{{.BIN_DIR}}/{{.BIN_NAME}}" 2>/dev/null || true

  # --- Hot-reload loop -------------------------------------------------------
  hot:
    desc: "Rebuild, restart, repeat — use with `task --watch hot`"
    method: none
    silent: true
    sources:
      - "**/*.go"
      - "**/*.templ"
      - "**/*.css"
      # - "scripts/**/*.schema.json"   # watch schemas too
    deps: [kill, build]
    cmds:
      - "{{.BIN_DIR}}/{{.BIN_NAME}}"

  # --- Git helpers -----------------------------------------------------------
  git:tag:
    desc: "Create & push git tag {{.VERSION}}"
    preconditions:
      - sh: git diff --quiet
        msg: "Working tree is dirty — commit first."
      - sh: '[ "$(git rev-parse --abbrev-ref HEAD)" = "master" ]'
        msg: "Tag only from master branch."
    cmds:
      - git tag {{.VERSION}}
      - git push origin {{.VERSION}}

  git:release:
    desc: "Push master branch plus tag"
    deps: [git:tag]
    cmds:
      - git push origin master

  # --- Convenience aliases ---------------------------------------------------
  default:
    desc: "runs the hot reload server"
    cmds:
      - task -w hot
