// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"github.com/a-h/templ"
	templruntime "github.com/a-h/templ/runtime"
)

func PanelLeftToggle() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- CLOSED  ▷  (arrow points right, panel is closed) --><svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6,currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" data-show=\"!$leftOpen\"><rect x=\"1\" y=\"1\" width=\"22\" height=\"22\" rx=\"2\"></rect> <path d=\"M7 1v22\"></path> <path d=\"m12 9 3 3-3 3\"></path><!-- right-pointing chevron --></svg><!-- OPEN  ◁  (arrow points left, panel is open) --><svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6,currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" data-show=\"$leftOpen\"><rect x=\"1\" y=\"1\" width=\"22\" height=\"22\" rx=\"2\"></rect> <path d=\"M7 1v22\"></path> <path d=\"m14 15-3-3 3-3\"></path><!-- left-pointing chevron --></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PanelBottomToggle() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- CLOSED  ▽  --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6, currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon icon-close\" data-show=\"$bottomOpen\"><rect width=\"22\" height=\"22\" x=\"1\" y=\"1\" rx=\"2\"></rect> <path d=\"M1 15h22\"></path> <path d=\"m15 8-3 3-3-3\"></path></svg><!-- OPEN  △  --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6, currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"icon icon-open\" data-show=\"!$bottomOpen\"><rect width=\"22\" height=\"22\" x=\"1\" y=\"1\" rx=\"2\"></rect> <path d=\"M1 15h22\"></path> <path d=\"m9 10 3-3 3 3\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func PanelRightToggle() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- CLOSED  ◁  (arrow points left, panel is closed) --><svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6,currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" data-show=\"!$rightOpen\"><rect x=\"1\" y=\"1\" width=\"22\" height=\"22\" rx=\"2\"></rect> <path d=\"M17 1v22\"></path> <path d=\"m12 15-3-3 3-3\"></path><!-- left chevron, centered --></svg><!-- OPEN  ▷  (arrow points right, panel is open) --><svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"var(--surface-1)\" stroke=\"var(--gray-6,currentColor)\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" data-show=\"$rightOpen\"><rect x=\"1\" y=\"1\" width=\"22\" height=\"22\" rx=\"2\"></rect> <path d=\"M17 1v22\"></path> <path d=\"m10 9 3 3-3 3\"></path><!-- right chevron, centered --></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
